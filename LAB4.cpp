#include "normal.h"
#include <iostream>
#include <string>
#include <chrono>
#include <assert.h>

using namespace std;

constexpr static int M = 491;

template < int >
string benchmark() {
	static auto start = chrono::high_resolution_clock::now();
	long long result = (chrono::high_resolution_clock::now() - start).count();
	start = chrono::high_resolution_clock::now();
	char buffer[1024];
	sprintf_s(buffer, "%.6fms", result / 1000000.0);
	return buffer;
}

int main()
{

	benchmark<0>();

	cout
		<< "M = " << M << "\n"
		<< "\n";

	normal
		a("11000101101111010000101101110010101010001100010111001010010011101001101111010101010101010000110101011100100010110011010101010011010011111100110010000101111100001100111011011100010101010110010000101110011111000100110000100011000000010100101011111001011011111001100101001011010011111111010011000011000111110011101010010010101001011000101010100010100001111001000110010110110000111100111100110001010101000101111111001010111000110000011100110101001111010011100101101101100111111100010010100001100"),
		b("01011000000101101110011001010100101101111011011001000101000110010100000110111001100010001010011111110001111000100001110100100100111100001110101011011100010100010010111110110110110010000100010010101100101011001010100110001001101110110100011010110100111000111010100111001110100011010100011111100111001100111101000100111110100010101011100000110000101100001010000100000111010101000111100111101111011010101111001011010110011111000001111010110110011110011100111101010101011010000110011110101111011"),
		n("11110000111100101100101011001100010101010011101101010101111110010100110111111110100100101001000100011001110101100000100000101011011101110110001001110001001011000101010010101011000111001000110001110110001101001100101000010000000011001010000001011100011000011001101010111100001101111001011101101100110000100011111111110000110101111001000111000011111010000011011011101001100101010000010100011110100010001011010110000000110000010101100101111111100111110111010100001111011011011100111111001111110"),
		ab_sum("10011101101010111110110100100110000111110111001110001111010101111101101001101100110111011010101010101101011010010010100001110111101111110010011001011001101000011110000101101010100111010010000010000010110100001110010110101010101110100000110001001101100011000011000010000101110000101011001100100100001011001110101110101100001011110011001010010010001101110011000010010001100101111011011011011110001111101010110100011100100111110001100110000011010001001111011000111000111101111010001100001110111"),
		ab_prod("01000100000010111000010001000111010100100000000100001000010011001001001000011111010101111010010001101011111101101000010010110011011010111100110000110010000111001011101010111110011100100100111001000100001000000000111101101011100010111100110000110100110100100110110110100101000100111110110010001100010001001100010000010010001110010010011001110011011110011110011010011010011111100111101011110000100101010000110111010100101101000100110001101001111100101110100101100001111100010011101000110010101"),
		a_sqr("01100010110111101000010110111001010101000110001011100101001001110100110111101010101010101000011010101110010001011001101010101001101001111110011001000010111110000110011101101110001010101011001000010111001111100010011000010001100000001010010101111100101101111100110010100101101001111111101001100001100011111001110101001001010100101100010101010001010000111100100011001011011000011110011110011000101010100010111111100101011100011000001110011010100111101001110010110110110011111110001001010000110"),
		a_inv("00110111001001111101001111101110010110111101100010111100110011000010001001010111010111010101110101100100001110101100011011100101011011011100001001001011111000001111010001100101010110101011110100001000110101110101010100100001100111100110111011000010011101001100111011111101000011100011110001111000010110111100110100111110010100001101110011010011100011101010011011100100001111101000110101101101110000111000101101000010110010011100110011110011101111001111010001001000110101111110111111111100000"),
		an_pow("11000011001010000111011010001001100111010010101001100101110100101000100001011111011111101011000101100010101011000111111011010001011001000110000100110000111110000111101000100010001011111011101001001111110000011000011001110011100000001001010000111110000100110011001100110111010110011101110011001101001000011001010111111010000101000101000111000010111100111101000011001100001000010011001110001101110101010010110100110110111110001100100010010110100011001101100101010101110011101010100110000101010");

	cout
		<< "a = " << a << "\n"
		<< "b = " << b << "\n"
		<< "n = " << n << "\n\n";

	normal temp;
	string time;

	cout << "ZERO = ";
	benchmark<1>();
	normal zero = bitset<M>(0);
	time = benchmark<1>();
	cout
		<< zero << "\n"
		<< "Time: " << time << "\n"
		<< "\n";

	cout << "ONE = ";
	benchmark<1>();
	normal one = zero.flip();
	time = benchmark<1>();
	cout
		<< one << "\n"
		<< "Time: " << time << "\n"
		<< "\n";

	cout << "a + b = ";
	benchmark<1>();
	temp = a + b;
	time = benchmark<1>();
	assert(temp == ab_sum);
	cout
		<< temp << "\n"
		<< "Time: " << time << "\n"
		<< "\n";

	cout << "a * b = ";
	benchmark<1>();
	temp = a * b;
	time = benchmark<1>();
	assert(temp == ab_prod);
	cout
		<< temp << "\n"
		<< "Time: " << time << "\n"
		<< "\n";

	cout << "a ^ 2 = ";
	benchmark<1>();
	temp = a.sqr();
	time = benchmark<1>();
	assert(temp == a_sqr);
	cout
		<< temp << "\n"
		<< "Time: " << time << "\n"
		<< "\n";

	cout << "a ^ (-1) = ";
	benchmark<1>();
	temp = a.inverse();
	time = benchmark<1>();
	assert(temp == a_inv);
	cout
		<< temp << "\n"
		<< "Time: " << time << "\n"
		<< "\n";

	cout << "a ^ n = ";
	benchmark<1>();
	temp = normal::pow(a, n);
	time = benchmark<1>();
	assert(temp == an_pow);
	cout
		<< temp << "\n"
		<< "Time: " << time << "\n"
		<< "\n";

	normal
		x = (a + b) * n,
		y = b * n + n * a;
	assert(x == y);
	cout
		<< "(a + b) * n = " << x << "\n"
		<< "b * n + n * a = " << y << "\n"
		<< "\n";

	cout << "n ^ (2 ^ n - 1) = ";
	temp = normal::pow(n, one);
	assert(temp == one);
	cout
		<< temp << "\n"
		<< "\n";

	time = benchmark<0>();
	cout << "Total time: " << time << "\n";

}